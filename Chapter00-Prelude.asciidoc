== Prélude

_« La simplicité est la sophistication suprême.» - Léonard De Vinci_

Le développement de logiciels web modernes continue à évoluer à très grande vitesse. Ces dernières années nous avons vu l'état du client migrer vers le serveur avant de revenir sur le client. Malgré les services rendus par JavaScript, deux ingénieurs donneront probablement trois avis différents sur ses mérites. L'arrivée d'HTML5 s'accompagne du support d'une armada de contenus riches et du support de la concurrence directement dans le navigateur. Le modèle de données relationnel, valide depuis plus de quarante ans, n'est plus à la mode remplacé par les systèmes NoSQL pleins de morgue. Nos systèmes de gestion de configuration ont été remaniés en profondeur tant du point de vue de l'implémentation que du paradigme.

Nos outils deviennent des prescriptions pour un buffet en perpétuel changement, choisir parmi cette montagne de possibilités est un exercice vertigineux.

En même temps, les ingénieurs font toujours face aux mêmes défis posés par la réalisation d'un proramme multi-utilisateurs; nous aimons que notre code soit élégant et maintenable. Nous avons besoin qu'il s'exécute de manière efficace et sécurisée. Nous devons nous assurer qu'il est correct.

Dans le monde Java, de nombreuses réponses ont été apportées par un ensemble de spécifications regroupées sous le titre _Java Enterprise Edition_.  Le but fondamental de cet effort est toujours d'actualité : cacher la complexité syntaxique inhérente au développement logiciel et essayer de fournir un modèle standard clair sur lequel construire les logiciels. En d'autres termes, la Plateforme JAVA EE est une trousse à outils en évolution, mais qui reste faillible.

Donc, il y a quelques années nous avons décidé de remplir certains des vides des spécifications Java EE et nous nous sommes retrouvés aux commandes d'un framework de test qui inspira notre imagination et se trouva beaucoup plus polyvalent que nous ne l'avions envisagé. Alors que nous donnions corps à nos idées afin de partager au mieux les leçons que nous avions apprises, il devenait clair que nous n'avions pas besoin de documenter une technologie en particulier. C'est d'une carte cohérente pour naviguer dans les eaux troubles de Java EE, ses frameworks et ses services dont ont besoin les développeurs.

Ce texte ne décrit pas une spécification, ces volumes peuvent être obtenus par ailleurs, car nous avons découvert que ça n'avait guère de sens que de commencer notre apprentissage par les Solutions.

Au lieu de cela, commençons par les Problèmes.  C'est au travers de cas d'utilisation que nous appréhendrons le développement testable Java d'entreprise. Chaque chapitre, après un peu de théorie préliminaire et une légère présentation des bases requises, s'attaquera à un unique problème de haut niveau. Les solutions que nous proposons peuvent aller de l'interface utilisateur au stockage persistent, touchant de nombreux standards ou projets tiers en chemin.  Tous les exemples sont exécutables, pour preuve ils tournent en production sur le site web compagnion.

Le débutant devrait s'attendre à rencontrer les différentes pièces d'un système Java d'entreprise et à transformer un dépôt entièrement vide en une application complète, visible publiquement et déployée dans le cloud.  Les développeurs de toutes les couleurs peuvent trouver des approches intéressantes pour tester à partir de données existantes, envoyer des évènements au client, intérargir avec une grille de données distribuée, valider l'interface utilisateur et bien plus encore.

En résumé, nous voudrions rendre la complexité beaucoup moins complexe. Avec de la chance, cele vous apportera une meilleure productivité et plus de plaisir dans votre travail.

Du moins c'est ce que nous avons vécu alors que nous utilisions les techniques qui ont inspiré ce livre.